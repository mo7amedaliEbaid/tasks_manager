// Mocks generated by Mockito 5.4.5 from annotations
// in tasks_manager/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i10;

import 'package:flutter/foundation.dart' as _i13;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:tasks_manager/data/data_sources/auth_remote_data_source.dart'
    as _i11;
import 'package:tasks_manager/data/models/auth_user_model.dart' as _i3;
import 'package:tasks_manager/domain/entities/auth_user.dart' as _i4;
import 'package:tasks_manager/domain/entities/task_entity.dart' as _i6;
import 'package:tasks_manager/domain/repositories/auth_repository.dart' as _i12;
import 'package:tasks_manager/domain/repositories/tasks_repository.dart'
    as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthUserModel_2 extends _i1.SmartFake implements _i3.AuthUserModel {
  _FakeAuthUserModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthUser_3 extends _i1.SmartFake implements _i4.AuthUser {
  _FakeAuthUser_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSOptions_4 extends _i1.SmartFake implements _i5.IOSOptions {
  _FakeIOSOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_5 extends _i1.SmartFake
    implements _i5.AndroidOptions {
  _FakeAndroidOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_6 extends _i1.SmartFake implements _i5.LinuxOptions {
  _FakeLinuxOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_7 extends _i1.SmartFake
    implements _i5.WindowsOptions {
  _FakeWindowsOptions_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_8 extends _i1.SmartFake implements _i5.WebOptions {
  _FakeWebOptions_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_9 extends _i1.SmartFake implements _i5.MacOsOptions {
  _FakeMacOsOptions_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTask_10 extends _i1.SmartFake implements _i6.Task {
  _FakeTask_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i7.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i7.Future<_i2.Response>);

  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<_i10.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i7.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
          )
          as _i7.Future<_i10.Uint8List>);

  @override
  _i7.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i7.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i7.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i11.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.AuthUserModel> login(String? username, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i7.Future<_i3.AuthUserModel>.value(
              _FakeAuthUserModel_2(
                this,
                Invocation.method(#login, [username, password]),
              ),
            ),
          )
          as _i7.Future<_i3.AuthUserModel>);

  @override
  _i7.Future<_i3.AuthUserModel> getCurrentUser(String? accessToken) =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, [accessToken]),
            returnValue: _i7.Future<_i3.AuthUserModel>.value(
              _FakeAuthUserModel_2(
                this,
                Invocation.method(#getCurrentUser, [accessToken]),
              ),
            ),
          )
          as _i7.Future<_i3.AuthUserModel>);

  @override
  _i7.Future<Map<String, String>> refreshSession(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#refreshSession, [refreshToken]),
            returnValue: _i7.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i7.Future<Map<String, String>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i12.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.AuthUser> login(String? username, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i7.Future<_i4.AuthUser>.value(
              _FakeAuthUser_3(
                this,
                Invocation.method(#login, [username, password]),
              ),
            ),
          )
          as _i7.Future<_i4.AuthUser>);

  @override
  _i7.Future<_i4.AuthUser> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i7.Future<_i4.AuthUser>.value(
              _FakeAuthUser_3(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i7.Future<_i4.AuthUser>);

  @override
  _i7.Future<void> refreshSession() =>
      (super.noSuchMethod(
            Invocation.method(#refreshSession, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i5.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_4(this, Invocation.getter(#iOptions)),
          )
          as _i5.IOSOptions);

  @override
  _i5.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_5(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i5.AndroidOptions);

  @override
  _i5.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_6(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i5.LinuxOptions);

  @override
  _i5.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_7(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i5.WindowsOptions);

  @override
  _i5.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_8(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i5.WebOptions);

  @override
  _i5.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_9(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i5.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i13.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i13.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> write({
    required String? key,
    required String? value,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> read({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<bool> containsKey({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> delete({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, String>> readAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i7.Future<Map<String, String>>);

  @override
  _i7.Future<void> deleteAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i7.Future<bool?>.value(),
          )
          as _i7.Future<bool?>);
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i14.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i6.Task>> getTasks({
    required int? limit,
    required int? skip,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, [], {#limit: limit, #skip: skip}),
            returnValue: _i7.Future<List<_i6.Task>>.value(<_i6.Task>[]),
          )
          as _i7.Future<List<_i6.Task>>);

  @override
  _i7.Future<_i6.Task> addTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#addTask, [task]),
            returnValue: _i7.Future<_i6.Task>.value(
              _FakeTask_10(this, Invocation.method(#addTask, [task])),
            ),
          )
          as _i7.Future<_i6.Task>);

  @override
  _i7.Future<_i6.Task> updateTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i7.Future<_i6.Task>.value(
              _FakeTask_10(this, Invocation.method(#updateTask, [task])),
            ),
          )
          as _i7.Future<_i6.Task>);

  @override
  _i7.Future<void> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}
